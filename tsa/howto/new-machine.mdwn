[[!toc levels=3]]

Installation
============

This document assumes the machine is already installed with a Debian
operating system. We preferably install stable or, when close to the
release, testing. Here are site-specific installs:

* [[new-machine-hetzner-cloud]]
* [[new-machine-hetzner-robot]]
* for a new machine in the [[ganeti]] cluster, see the [[ganeti]]
  configuration, "Adding a new instance" section
* linaro: [[openstack]]

The following sites are not documented yet:

 * cymru
 * [[KVM]]/libvirt
 * scaleway
 * sunet

Configuration procedure
=======================

All commands to be run as root unless otherwise noted.

* set a hostname - pick an unused one from the [[doc/naming-scheme]]

* allocate and document the machine in the [Nextcloud spreadsheet](https://nc.torproject.net/apps/onlyoffice/5395), and the
  [services page](https://trac.torproject.org/projects/tor/wiki/org/operations/services), if it's a new service

* set new root password, and document it

* swap and tmp

        grep -q tmpfs /etc/fstab || echo 'tmpfs /tmp tmpfs defaults 0 0' >> /etc/fstab

        ! grep -q swap /etc/fstab && \
        dd if=/dev/zero bs=1024k count=1024 of=/swapfile && \
        chmod 0 /swapfile && \
        mkswap /swapfile && \
        echo '/swapfile none swap sw 0 0' >> /etc/fstab && \
        swapon -a

* sanitize DNS configuration:

        # grep torproject.org /etc/resolv.conf || echo 'domain torproject.org' >>  /etc/resolv.conf
        grep torproject.org /etc/resolv.conf || ( echo 'domain torproject.org'; echo 'nameserver 8.8.8.8' ) > /etc/resolv.conf
        vi /etc/hosts # make sure the local host is there with both FQDN and just hostname

* add to ldap on `alberti` using:

        ldapvi -ZZ --encoding=ASCII --ldap-conf -h db.torproject.org -D "uid=$USER,ou=users,dc=torproject,dc=org"

  To generate the LDAP block, you can use the
  `tor-install-generate-ldap` script in `tsa-misc`. Make sure you
  review all fields, in particular `location` (`l`), `physicalHost`,
  `description` and `purpose` which do not have good defaults.

  See the [[upgrades]] section for information about the
  `rebootPolicy` field.

  See also the [ldapvi manual](http://www.lichteblau.com/ldapvi/manual/) for more
  information.

* then:
  * on alberti:

        sudo -u sshdist ud-generate && sudo -H ud-replicate && sudo puppet agent -t

  * on nevii (optional):

        sudo -H ud-replicate

* set up puppet:
  * on pauli:

        ( puppet agent -t || true ) && \
        ud-replicate && \
        sudo -H -u puppet make -C /srv/puppet.torproject.org/auto-ca install

  * on new machine:

        me=$(hostname -f) && \
        [ "$me" != "${me%torproject.org}" ] && \
        apt-get update && \
        apt-get install -y --no-install-recommends puppet lsb-release && \
        service puppet stop && \
        systemctl mask puppet.service && \
        (puppet agent -t || true ) && \
        cd /var/lib/puppet/ssl/certificate_requests && \
        echo sha256sum output: && \
        echo && \
        sha256sum $me.pem && \
        echo && \
        echo && \
        cd /

  * on pauli:

        echo "paste sha256sum output now:" && \
        read sha256 filename && \
        cd /var/lib/puppet/ssl/ca/requests && \
        ( [ -e $filename ] || (echo "$filename does not exist."; exit 1) ) && \
        echo "$sha256  $filename" | sha256sum -c && \
        puppet ca sign $(basename "$filename" .pem) && \
        echo && \
        echo "--- 8< --- CUT HERE --- 8< ---" && \
        echo && \
        echo 'cat > /var/lib/puppet/ssl/certs/ca.pem << EOF ' && \
        cat /var/lib/puppet/ssl/certs/ca.pem && \
        echo 'EOF' && \
        echo "cat > /var/lib/puppet/ssl/certs/$filename << EOF " && \
        cat /var/lib/puppet/ssl/ca/signed/$filename && \
        echo 'EOF' && \
        echo 'puppet agent --enable' && \
        echo 'puppet agent -t --pluginsync' && \
        echo 'puppet agent -t --pluginsync' && \
        echo && \
        echo "--- 8< --- CUT HERE --- 8< ---" && \
        echo && \
        cd /

* copy paste the thing between `CUT HERE` from `pauli` into a root
  shell on the new host

* do more puppet runs, and run a ud-replicate to get ldap users, then
  more puppet runs since we now have more users:

        puppet agent -t
        ud-replicate
        puppet agent -t
        puppet agent -t

* follow security upgrades:

        apt update && apt dist-upgrade && apt clean

* get rid of unneeded network services (only needed if we did not install this
  from a minbase but from somebody else's install/image):

        dpkg --purge portmap nfs-common exim4 exim4-base exim4-config exim4-daemon-light
        userdel -r Debian-exim

  TODO: remove the above once we figure out it's obsolete. It's not
  necessary with the folowing procedures:

    * [[new-machine-hetzner-robot]]

* fix `/etc/aliases` (TODO: #32283):

        ( ! grep '^root:' /etc/aliases && echo 'root: torproject-admin@torproject.org' >> /etc/aliases ) &&
        sed -i -e 's/^root:.*/root: torproject-admin@torproject.org/' /etc/aliases && newaliases

* reboot to make sure *that* still works:

        reboot

* add to [[nagios]], in `tor-nagios/config/nagios-master.cfg`

* if the machine is handling mail, add it to [dnswl.org](https://www.dnswl.org/) (password
  in tor-passwords, `hosts-extra-info`)

# Reference

## Design

If you want to understand better the different installation procedures there is a
install flowchart that was made on [Draw.io](https://draw.io). 

[[install.png]]

There are also per-site install graphs:

 * [install-hetzner-cloud.png](install-hetzner-cloud.png)
 * [install-hetzner-robot.png](install-hetzner-robot.png)
 * [install-ganeti.png](install-ganeti.png)

To edit those graphics, head to the <https://draw.io> website (or
install their Electron desktop app) and load the [install.drawio](./install.drawio)
file.

Those diagrams were created as part of the redesign of the install
process, to better understand the various steps of the process and see
how they could be refactored. They should not be considered an
authoritative version of how the process should be followed. 

The text representation in this wiki remains the reference copy.

## Issues

Issues regarding installation on new machines are far ranging and do
not have a specific component. 

The install system is manual and not completely documented for all
sites. It needs to be automated, which is discussed below and in
[ticket 31239: automate installs](https://trac.torproject.org/projects/tor/ticket/31239).

A good example of the problems that can come up with variations in
the install process is [ticket 31781: ping fails as a regular user on
new VMs](https://trac.torproject.org/projects/tor/ticket/31781).

# Discussion

This section discusses background and implementation details of
installation of machines in the project. It shouldn't be necessary for
day to day operation.

## Overview

The current install procedures work, but have only recently been
formalized, mostly because we rarely setup machines. We do expect,
however, to setup a significant number of machines in 2019, or at
least significant enough to warrant automating the install process
better.

Automating installs is also critical according to Tom Limoncelli, the
author of the [Practice of System and Network Administration](https://the-sysadmin-book.com/). In
their [Ops report card](http://opsreportcard.com/), [question 20](http://opsreportcard.com/section/20) explains:

> If OS installation is automated then all machines start out the
> same. Fighting entropy is difficult enough. If each machine is
> hand-crafted, it is impossible.
>
> If you install the OS manually, you are wasting your time twice:
> Once when doing the installation and again every time you debug an
> issue that would have been prevented by having consistently
> configured machines.
>
> If two people install OSs manually, half are wrong but you don't
> know which half. Both may claim they use the same procedure but I
> assure you they are not. Put each in a different room and have them
> write down their procedure. Now show each sysadmin the other
> person's list. There will be a fistfight.

In that context, it's critical to automate a reproducible install
process. This gives us a consistent platform that Puppet runs on top
of, with no manual configuration.

## Goals

The project of automating the install is documented in [ticket
31239](https://trac.torproject.org/projects/tor/ticket/31239).

### Must have

 * unattended installation
 * reproducible results
 * post-installer configuration (ie. not full installer, see below)
 * support for running in our different environments (Hetzner Cloud,
   Robot, bare metal, Ganeti...)

### Nice to have

 * packaged in Debian
 * full installer support:
   * RAID, LUKS, etc filesystem configuration
   * debootstrap, users, etc

### Non-Goals

 * full configuration management stack - that's done by [[puppet]]

## Approvals required

TBD.

## Proposed Solution

TBD.

## Cost

TBD.

## Alternatives considered

 * [Ansible](https://www.ansible.com/) - configuration management that duplicates [[puppet]]
   but which we may want to use to bootstrap machines instead of yet
   another custom thing that operators would need to learn.
 * [cloud-init](https://cloud-init.io/) - builtin to many cloud images (e.g. Amazon), can
   do [rudimentary filesystem setup](https://cloudinit.readthedocs.io/en/latest/topics/modules.html#disk-setup) (no RAID/LUKS/etc but ext4
   and disk partitionning is okay), [config can be fetched over
   HTTPS](https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html), assumes it runs on first boot, but could be coerced to
   run manually (e.g. `fgrep -r cloud-init /lib/systemd/ | grep Exec`)
 * [cobbler](https://cobbler.github.io/) - takes care of PXE and boot, delegates to kickstart
   the autoinstall, more relevant to RPM-based distros
 * [curtin](https://launchpad.net/curtin) - "a "fast path" installer designed to install Ubuntu
   quickly.  It is blunt, brief, snappish, snippety and
   unceremonious." ubuntu-specific, not in Debian, but has strong
   [partitionning support](https://curtin.readthedocs.io/en/latest/topics/storage.html) with ZFS, LVM, LUKS, etc support. part
   of the larger [MAAS](https://maas.io/) project
 * [FAI](https://fai-project.org/) - built by a debian developer, used to build live images
   since buster, might require complex setup (e.g. an NFS server),
   [setup-storage(8)](https://manpages.debian.org/buster/fai-setup-storage/setup-storage.8.en.html) might be reusable on its own. uses Tar-based
   images created by FAI itself, requires network control or custom
   ISO boot, requires a "server" (the [fai-server](https://packages.debian.org/unstable/fai-server) package)
 * [himblick](https://github.com/himblick/himblick) has some interesting post-install configure bits in
   Python, along with pyparted bridges
 * [list of debian setup tools](https://wiki.debian.org/SystemBuildTools), see also
   [AutomatedInstallation](https://wiki.debian.org/AutomatedInstallation)
 * [livewrapper](https://salsa.debian.org/enrico/live-wrapper) is also one of those installers, in a way
 * [vmdb2](https://vmdb2.liw.fi/) - a rewrite of vmdeboostrap, which uses a YAML file to
   describe a set of "steps" to take to install Debian, should work on
   VM images but also disks, no RAID support and a [significant number
   of bugs](https://bugs.debian.org/cgi-bin/pkgreport.cgi?repeatmerged=no&src=vmdb2) might affect reliability in production
 * [MAAS](https://maas.io/) - PXE-based, assumes network control which we don't have
   and has all sorts of features we don't want
 * [[puppet]] - Puppet could bootstrap itself, with `puppet apply` ran
   from a clone of the git repo. could be extended as deep as we want.
 * [terraform](https://www.terraform.io/) - config management for the cloud kind of thing,
   supports Hetzner Cloud, but not Hetzner Robot or Ganeti

Unfortuantely, I ruled out the official debian-installer because of
the complexity of the preseeding system and partman. It also wouldn't
work for installs on Hetzner Cloud or Ganeti.
