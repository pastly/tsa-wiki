
# NAME

**onionoo-ops** - Onionoo Operations

# DESCRIPTION

Onionoo is a web-based protocol to learn about currently running Tor relays and
bridges. Onionoo itself was not designed as a service for human beings&#8212;at least
not directly. Onionoo provides the data for other applications and websites
which in turn present Tor network status information to humans.

The primary interface to Onionoo is via HTTPS using the round-robin DNS name
[onionoo.torproject.org](https://onionoo.torproject.org/)

# CONTACTS

The primary contact for this service is the
Metrics Team &lt;[metrics-team@lists.torproject.org](mailto:metrics-team@lists.torproject.org)&gt;.
For urgent queries, contact
*karsten*,
*irl*,
or
*gaba*
in
[#tor-project](ircs://irc.oftc.net:6697/tor-project).

# OVERVIEW

The underlying infrastructure for the Onionoo service is provided by the
Tor Sysadmin Team (TSA). There are a number of varnish caches
(*onionoo-frontend-\*.torproject.org*)
that sit in front of a number of backends
(*onionoo-backend-\*.torproject.org*).
The frontends are entirely managed by TSA.
The frontends communicate with the backends via IPsec tunnels managed by TSA.
The backend hosts are managed by TSA with the Onionoo services being managed
by Metrics Team.

## Onionoo Service Architecture

The Onionoo service consists of two parts: the hourly updater and the web
server.
Both parts run on each backend host and the parts run with privilege seperation.

## Hourly Updater

The hourly updater is contained in the JAR file, which is built from the
sources with:

	ant jar

The JAR file is also included in the tarballs made available with releases in
the
*generated/dist/*
folder.
The filename will look like
*onionoo-{protocol version}-{software version}.jar*
and on the backend host should be found in
*/srv/onionoo.torproject.org/onionoo/*.

## Web Server

The web server is contained in the WAR file, which is built from the
sources with:

	ant war

The WAR file is also included in the tarballs made available with releases in
the
*generated/dist/*
folder.
The filename will look like
*onionoo-{protocol version}-{software version}.jar*
and on the backend host should be found in
*/srv/onionoo.torproject.org/onionoo/*.

# SOURCES

Onionoo releases are available
[from dist.torproject.org](https://dist.torproject.org/onionoo/)
with the source code available
[from Tor Project git](https://gitweb.torproject.org/onionoo.git).

Deployment and maintainence scripts are part of
[metrics-cloud](https://gitweb.torproject.org/metrics-cloud.git).

# DEPLOYMENT

## Initial deployment

The initial deployment procedure is split into 3 parts:

* System setup
* Importing history
* Installing and starting the service

### Development/testing in AWS

For development or testing in AWS, a CloudFormation template is available
named
*[onionoo-dev.yml](https://gitweb.torproject.org/metrics-cloud.git/plain/cloudformation/onionoo-dev.yml)*.
The header for this template includes the command required to deploy the stack.
It will deploy in your local user's namespace (the output of whoami) and must
be provided with the name of your SSH key pair.

From the CloudFormation portal, select your stack and view the outputs. You
will find here the public IP address for the EC2 instance that has been created.
Add this instance to *ansible/dev* in your local copy of metrics-cloud.git
under "[onionoo-backends]".

You can now setup the machine with Ansible by running:

```
ansible-playbook -i dev oninooo-backends-aws.yml
```

### Fresh machine from TSA

Begin by copying the *state* and *out* directories from another Onionoo backend
to */srv/onionoo.torproject.org/onionoo/{state,out}*.

Add the host name of the new instance to *ansible/production* in your local
copy of metrics-cloud.git under "[onionoo-backends]" and commit the change.

You can now setup the machine with Ansible by running:

```
ansible-playbook -i production onionoo-backends.yml
```

## Upgrade

# DIAGNOSTICS

Logs for the hourly updater can be found in
*/srv/onionoo.torproject.org/logs/*, and for the web server in
*/srv/onionoo.torproject.org/web-logs/*.

# MONITORING

# DISASTER RECOVERY

## Single backend failure

## Total loss

## Total loss including all backups

# SERVICE LEVEL AGREEMENT

# SEE ALSO

# STANDARDS

# HISTORY

# AUTHORS

# BUGS

Known bugs can be found in the Tor Project Trac using
[this query](https://trac.torproject.org/projects/tor/query?status=!closed&component=Metrics%252FOnionoo).

New bug reports should also be
[filed at the Tor Project Trac](https://trac.torproject.org/projects/tor/newticket?component=Metrics/Onionoo)
in the
*Metrics/Onionoo*
component.

